clusterName: selliecluster
application: patroni
containerImage: connorblack/patroni-citus-k8s:latest
image:
  repository: connorblack/patroni-citus-k8s
  pullPolicy: Always
  tag: latest
imagePullSecrets:
  - name: docker-regcred
citusDatabase: sellie-citus
superuserUsername: postgres
superuserPasswordKey: superuser-password
replicationUsername: standby
replicationPasswordKey: replication-password
postgresqlDataDir: /home/postgres/pgdata/pgroot/data
postgresqlPgpass: /tmp/pgpass
postgresqlListen: "*:5432"
postgresqlVolumeMountPath: /home/postgres/pgdata
postgresqlVolumeMountName: nfs-subdir-external-provisioner-root
restapiListen: "*:8008"
containerHttpPort: 8008
containerPostgresPort: 5432
secrets:
  superuserPassword: "c3VwZXJ1c2VyLXBhc3N3b3Jk"
  replicationPassword: "cmVwbGljYXRpb24tcGFzc3dvcmQ="
pvc:
  name: pvc-sellie-db-nfs-subdir-external-provisioner
nfs-subdir-external-provisioner:
  nfs:
    server: 100.71.31.74 # This ensures the value is passed to the dependency chart
    path: /Volumes/1M2/nfs-storage
    mountOptions:
      - nfsvers=3

  storageClass:
    defaultClass: true
    allowVolumeExpansion: true
    reclaimPolicy: Retain
    accessModes: ReadWriteMany
    volumeBindingMode: Immediate
    volumeName: nfs-subdir-external-provisioner-root
# serviceAccount:
#   # Specifies whether a service account should be created
#   create: true
#   # Automatically mount a ServiceAccount's API credentials?
#   automount: true
#   # Annotations to add to the service account
#   annotations: {}
#   # The name of the service account to use.
#   # If not set and create is true, a name is generated using the fullname template
#   name: ""

# podAnnotations: {}
# podLabels: {}

# podSecurityContext:
#   {}
#   # fsGroup: 2000

# securityContext:
#   {}
#   # capabilities:
#   #   drop:
#   #   - ALL
#   # readOnlyRootFilesystem: true
#   # runAsNonRoot: true
#   # runAsUser: 1000

# service:
#   type: ClusterIP
#   port: 80

# ingress:
#   enabled: false
#   className: ""
#   annotations:
#     {}
#     # kubernetes.io/ingress.class: nginx
#     # kubernetes.io/tls-acme: "true"
#   hosts:
#     - host: chart-example.local
#       paths:
#         - path: /
#           pathType: ImplementationSpecific
#   tls: []
#   #  - secretName: chart-example-tls
#   #    hosts:
#   #      - chart-example.local

# resources:
#   {}
#   # We usually recommend not to specify default resources and to leave this as a conscious
#   # choice for the user. This also increases chances charts run on environments with little
#   # resources, such as Minikube. If you do want to specify resources, uncomment the following
#   # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
#   # limits:
#   #   cpu: 100m
#   #   memory: 128Mi
#   # requests:
#   #   cpu: 100m
#   #   memory: 128Mi

# livenessProbe:
#   httpGet:
#     path: /
#     port: http
# readinessProbe:
#   httpGet:
#     path: /
#     port: http

# autoscaling:
#   enabled: false
#   minReplicas: 1
#   maxReplicas: 100
#   targetCPUUtilizationPercentage: 80
#   # targetMemoryUtilizationPercentage: 80

# # Additional volumes on the output Deployment definition.
# volumes: []
# # - name: foo
# #   secret:
# #     secretName: mysecret
# #     optional: false

# # Additional volumeMounts on the output Deployment definition.
# volumeMounts: []
# # - name: foo
# #   mountPath: "/etc/foo"
# #   readOnly: true

# nodeSelector: {}

# tolerations: []

# affinity: {}
